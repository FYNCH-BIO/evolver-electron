"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
var input = exports.input = "\n  interface XPoint<T> {\n    x: T;\n  }\n  interface YPoint<T> {\n    y: T;\n  }\n\n  class Base {}\n\n  class Point extends Base implements XPoint<number>, YPoint<number> {\n    x: number = 0;\n    y: number = 0;\n  }\n";

var expected = exports.expected = "\n  import t from \"flow-runtime\";\n\n  const XPoint = t.type(\"XPoint\", XPoint => {\n    const T = XPoint.typeParameter(\"T\");\n    return t.object(\n      t.property(\"x\", T)\n    );\n  });\n\n  const YPoint = t.type(\"YPoint\", YPoint => {\n    const T = YPoint.typeParameter(\"T\");\n    return t.object(\n      t.property(\"y\", T)\n    );\n  });\n\n  class Base {}\n\n  class Point extends Base {\n    @t.decorate(t.number())\n    x = 0;\n\n    @t.decorate(t.number())\n    y = 0;\n\n    constructor(...args) {\n      super(...args);\n      t.ref(XPoint, t.number()).assert(this);\n      t.ref(YPoint, t.number()).assert(this);\n    }\n  }\n";

var annotated = exports.annotated = "\n  import t from \"flow-runtime\";\n\n  const XPoint = t.type(\"XPoint\", XPoint => {\n    const T = XPoint.typeParameter(\"T\");\n    return t.object(\n      t.property(\"x\", T)\n    );\n  });\n\n  const YPoint = t.type(\"YPoint\", YPoint => {\n    const T = YPoint.typeParameter(\"T\");\n    return t.object(\n      t.property(\"y\", T)\n    );\n  });\n\n  @t.annotate(t.class(\n    \"Base\"\n  ))\n  class Base {}\n\n  @t.annotate(t.class(\n    \"Point\",\n    t.extends(Base),\n    t.property(\"x\", t.number()),\n    t.property(\"y\", t.number())\n  ))\n  class Point extends Base {\n    x = 0;\n    y = 0;\n  }\n";

var combined = exports.combined = "\n  import t from \"flow-runtime\";\n\n  const XPoint = t.type(\"XPoint\", XPoint => {\n    const T = XPoint.typeParameter(\"T\");\n    return t.object(\n      t.property(\"x\", T)\n    );\n  });\n\n  const YPoint = t.type(\"YPoint\", YPoint => {\n    const T = YPoint.typeParameter(\"T\");\n    return t.object(\n      t.property(\"y\", T)\n    );\n  });\n\n  @t.annotate(t.class(\n    \"Base\"\n  ))\n  class Base {}\n\n  @t.annotate(t.class(\n    \"Point\",\n    t.extends(Base),\n    t.property(\"x\", t.number()),\n    t.property(\"y\", t.number()),\n    t.method(\"constructor\", t.param(\"args\", t.any()))\n  ))\n  class Point extends Base {\n    @t.decorate(t.number())\n    x = 0;\n\n    @t.decorate(t.number())\n    y = 0;\n\n    constructor(...args) {\n      super(...args);\n      t.ref(XPoint, t.number()).assert(this);\n      t.ref(YPoint, t.number()).assert(this);\n    }\n  }\n";