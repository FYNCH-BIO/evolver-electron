'use strict';

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _fixtures = require('./fixtures');

var _fixtures2 = _interopRequireDefault(_fixtures);

var _testTransform = require('./testTransform');

var _testTransform2 = _interopRequireDefault(_testTransform);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

describe('transform', function () {
  var _loop = function _loop(name, input, expected, annotated, combined, customRuntime) {
    it('should transform ' + name, function () {
      (0, _testTransform2.default)(input, { assert: true, annotate: false }, expected);
    });
    if (annotated) {
      it('should transform ' + name + ' with decorations', function () {
        (0, _testTransform2.default)(input, { assert: false, annotate: true }, annotated);
      });
    }
    if (combined) {
      it('should transform ' + name + ' with decorations and assertions', function () {
        (0, _testTransform2.default)(input, { assert: true, annotate: true }, combined);
      });
    }
    if (customRuntime) {
      it('should transform ' + name + ' with custom runtime path', function () {
        (0, _testTransform2.default)(input, { libraryName: './custom-flow-runtime' }, customRuntime);
      });
    }
  };

  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = _fixtures2.default[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var _ref = _step.value;

      var _ref2 = _slicedToArray(_ref, 2);

      var name = _ref2[0];
      var _ref2$ = _ref2[1];
      var input = _ref2$.input;
      var expected = _ref2$.expected;
      var annotated = _ref2$.annotated;
      var combined = _ref2$.combined;
      var customRuntime = _ref2$.customRuntime;

      _loop(name, input, expected, annotated, combined, customRuntime);
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator.return) {
        _iterator.return();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }
});