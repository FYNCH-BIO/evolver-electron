'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.description = exports.name = undefined;
exports.run = run;

var _node = require('../lib/node');

var _npmLibDefs = require('../lib/npm/npmLibDefs');

var _validationErrors = require('../lib/validationErrors');

var name = exports.name = 'validate-defs';

var description = exports.description = 'Validate the structure of the /definitions dir';
function run(args) {
  var defsDirPath, defsDirPathStat, validationErrors, npmLibDefs;
  return regeneratorRuntime.async(function run$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          if (!(args._.length !== 2)) {
            _context.next = 3;
            break;
          }

          console.error('Please specify the path of the /definitions directory to be validated ' + 'as the first arg of this command.');
          return _context.abrupt('return', 1);

        case 3:
          defsDirPath = args._[1];
          _context.next = 6;
          return regeneratorRuntime.awrap(_node.fs.exists(defsDirPath));

        case 6:
          if (_context.sent) {
            _context.next = 9;
            break;
          }

          console.error('Error: Path does not exist: %s', defsDirPath);
          return _context.abrupt('return', 1);

        case 9:
          _context.next = 11;
          return regeneratorRuntime.awrap(_node.fs.stat(defsDirPath));

        case 11:
          defsDirPathStat = _context.sent;

          if (defsDirPathStat.isDirectory()) {
            _context.next = 15;
            break;
          }

          console.error('Error: Path is not a directory: %s', defsDirPath);
          return _context.abrupt('return', 1);

        case 15:
          validationErrors = new Map();
          _context.next = 18;
          return regeneratorRuntime.awrap((0, _npmLibDefs.getNpmLibDefs)(defsDirPath, validationErrors, true));

        case 18:
          npmLibDefs = _context.sent;

          if (!(validationErrors.size === 0)) {
            _context.next = 22;
            break;
          }

          console.log('All libdefs are named and structured correctly. ' + ('(Found ' + npmLibDefs.length + ')'));
          return _context.abrupt('return', 0);

        case 22:

          (0, _validationErrors.printValidationErrors)(validationErrors);
          return _context.abrupt('return', 1);

        case 24:
        case 'end':
          return _context.stop();
      }
    }
  }, null, this);
}