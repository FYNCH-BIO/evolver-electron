'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.url = exports.path = exports.os = exports.https = exports.fs = exports.child_process = undefined;

var _child_process = require('child_process');

var node_child_process = _interopRequireWildcard(_child_process);

var _https = require('https');

var node_https = _interopRequireWildcard(_https);

var _os = require('os');

var node_os = _interopRequireWildcard(_os);

var _path = require('path');

var node_path = _interopRequireWildcard(_path);

var _url = require('url');

var node_url = _interopRequireWildcard(_url);

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var child_process = exports.child_process = {
  exec: node_child_process.exec,
  execP: function execP(command, options) {
    return new Promise(function (res, rej) {
      node_child_process.exec(command, options, function (err, stdout, stderr) {
        if (err) {
          rej(err);
        } else {
          res({ stdout: new Buffer(stdout), stderr: new Buffer(stderr) });
        }
      });
    });
  },
  execFileP: function execFileP(command, argsOrOptions, options) {
    var _args = void 0;
    var _opts = void 0;

    if (Array.isArray(argsOrOptions)) {
      _args = argsOrOptions;
      _opts = options ? options : {};
    } else {
      _args = [];
      _opts = argsOrOptions ? argsOrOptions : {};
    }

    return new Promise(function (res, rej) {
      node_child_process.execFile(command, _args, _opts, function (err, stdout, stderr) {
        if (err) {
          rej(err);
        } else {
          res({ stdout: stdout, stderr: stderr });
        }
      });
    });
  },
  spawnP: function spawnP(command, args, options) {
    return new Promise(function (res, rej) {
      var process = node_child_process.spawn(command, args, options);
      var stderr = '';
      var stdout = '';
      process.stdout.on('data', function (chunk) {
        return stdout += chunk;
      });
      process.stderr.on('data', function (chunk) {
        return stderr += chunk;
      });
      process.on('close', function (exitCode) {
        if (exitCode === 0) {
          res({ stderr: stderr, stdout: stdout, exitCode: exitCode });
        } else {
          rej({ stderr: stderr, stdout: stdout, exitCode: exitCode });
        }
      });
    });
  }
};

var fs = exports.fs = {
  appendFile: _fsExtra2.default.appendFile,
  close: _fsExtra2.default.close,
  createReadStream: _fsExtra2.default.createReadStream,
  createWriteStream: _fsExtra2.default.createWriteStream,
  exists: _fsExtra2.default.exists,
  mkdir: _fsExtra2.default.mkdir,
  open: _fsExtra2.default.open,
  readdir: _fsExtra2.default.readdir,
  readFile: _fsExtra2.default.readFile,
  rename: _fsExtra2.default.rename,
  rmdir: _fsExtra2.default.rmdir,
  stat: _fsExtra2.default.stat,
  statSync: _fsExtra2.default.statSync,
  Stats: _fsExtra2.default.Stats,
  unlink: _fsExtra2.default.unlink,
  writeFile: _fsExtra2.default.writeFile
};
var https = exports.https = node_https;
var os = exports.os = node_os;
var path = exports.path = node_path;
var url = exports.url = node_url;