'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.copyDir = copyDir;
exports.copyFile = copyFile;
exports.getFilesInDir = getFilesInDir;
exports.mkdirp = mkdirp;
exports.recursiveRmdir = recursiveRmdir;
exports.searchUpDirPath = searchUpDirPath;

var _fsExtra = require('fs-extra');

var _fsExtra2 = _interopRequireDefault(_fsExtra);

var _mkdirp = require('mkdirp');

var _mkdirp2 = _interopRequireDefault(_mkdirp);

var _node = require('./node.js');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var P = Promise;

function copyDir(srcPath, destPath) {
  return new Promise(function (res, rej) {
    _fsExtra2.default.copy(srcPath, destPath, function (err) {
      if (err) {
        rej(err);
      } else {
        res();
      }
    });
  });
}

function copyFile(srcPath, destPath, preProcessor) {
  return new Promise(function (res, rej) {
    var reader = _node.fs.createReadStream(srcPath);
    reader.on('error', rej);
    var writer = _node.fs.createWriteStream(destPath);
    writer.on('error', rej);
    writer.on('close', res);
    if (preProcessor) {
      reader.pipe(preProcessor);
      preProcessor.pipe(writer);
    } else {
      reader.pipe(writer);
    }
  });
}

function getFilesInDir(dirPath) {
  var _this = this;

  var recursive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
  var dirItems, dirItemStats, installedLibDefs;
  return regeneratorRuntime.async(function getFilesInDir$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          _context2.next = 2;
          return regeneratorRuntime.awrap(_node.fs.readdir(dirPath));

        case 2:
          dirItems = _context2.sent;
          _context2.next = 5;
          return regeneratorRuntime.awrap(P.all(dirItems.map(function (item) {
            return _node.fs.stat(_node.path.join(dirPath, item));
          })));

        case 5:
          dirItemStats = _context2.sent;
          installedLibDefs = new Set();
          _context2.next = 9;
          return regeneratorRuntime.awrap(P.all(dirItems.map(function _callee(itemName, idx) {
            var itemStat, itemPath, subDirFiles;
            return regeneratorRuntime.async(function _callee$(_context) {
              while (1) {
                switch (_context.prev = _context.next) {
                  case 0:
                    itemStat = dirItemStats[idx];

                    if (!itemStat.isFile()) {
                      _context.next = 5;
                      break;
                    }

                    installedLibDefs.add(itemName);
                    _context.next = 11;
                    break;

                  case 5:
                    if (!(recursive && itemStat.isDirectory())) {
                      _context.next = 11;
                      break;
                    }

                    itemPath = _node.path.join(dirPath, itemName);
                    _context.next = 9;
                    return regeneratorRuntime.awrap(getFilesInDir(itemPath, recursive));

                  case 9:
                    subDirFiles = _context.sent;

                    subDirFiles.forEach(function (subItemName) {
                      return installedLibDefs.add(_node.path.join(itemName, subItemName));
                    });

                  case 11:
                  case 'end':
                    return _context.stop();
                }
              }
            }, null, _this);
          })));

        case 9:
          return _context2.abrupt('return', installedLibDefs);

        case 10:
        case 'end':
          return _context2.stop();
      }
    }
  }, null, this);
}

function mkdirp(path) {
  return new Promise(function (res, rej) {
    (0, _mkdirp2.default)(path, function (err) {
      if (err) {
        rej(err);
      } else {
        res();
      }
    });
  });
}

function recursiveRmdir(dirPath) {
  var _this2 = this;

  var dirItems, dirItemStats;
  return regeneratorRuntime.async(function recursiveRmdir$(_context4) {
    while (1) {
      switch (_context4.prev = _context4.next) {
        case 0:
          _context4.next = 2;
          return regeneratorRuntime.awrap(_node.fs.readdir(dirPath));

        case 2:
          dirItems = _context4.sent;
          _context4.next = 5;
          return regeneratorRuntime.awrap(P.all(dirItems.map(function (item) {
            return _node.fs.stat(_node.path.join(dirPath, item));
          })));

        case 5:
          dirItemStats = _context4.sent;
          _context4.next = 8;
          return regeneratorRuntime.awrap(P.all(dirItems.map(function _callee2(itemName, idx) {
            var itemStat, itemPath;
            return regeneratorRuntime.async(function _callee2$(_context3) {
              while (1) {
                switch (_context3.prev = _context3.next) {
                  case 0:
                    itemStat = dirItemStats[idx];
                    itemPath = _node.path.join(dirPath, itemName);

                    if (!itemStat.isFile()) {
                      _context3.next = 7;
                      break;
                    }

                    _context3.next = 5;
                    return regeneratorRuntime.awrap(_node.fs.unlink(itemPath));

                  case 5:
                    _context3.next = 11;
                    break;

                  case 7:
                    _context3.next = 9;
                    return regeneratorRuntime.awrap(recursiveRmdir(itemPath));

                  case 9:
                    _context3.next = 11;
                    return regeneratorRuntime.awrap(_node.fs.rmdir(itemPath).catch(function (err) {
                      if (err.code === 'ENOENT') {
                        // Ignore ENOENT error
                        // it's okay if the files are already removed
                        return;
                      }

                      throw err;
                    }));

                  case 11:
                  case 'end':
                    return _context3.stop();
                }
              }
            }, null, _this2);
          })));

        case 8:
          return _context4.abrupt('return', _node.fs.rmdir(dirPath));

        case 9:
        case 'end':
          return _context4.stop();
      }
    }
  }, null, this);
}

function searchUpDirPath(startDir, testFn) {
  var currDir, lastDir;
  return regeneratorRuntime.async(function searchUpDirPath$(_context5) {
    while (1) {
      switch (_context5.prev = _context5.next) {
        case 0:
          currDir = startDir;
          lastDir = null;

        case 2:
          if (!(currDir !== lastDir)) {
            _context5.next = 11;
            break;
          }

          _context5.next = 5;
          return regeneratorRuntime.awrap(testFn(currDir));

        case 5:
          if (!_context5.sent) {
            _context5.next = 7;
            break;
          }

          return _context5.abrupt('return', currDir);

        case 7:
          lastDir = currDir;
          currDir = _node.path.resolve(currDir, '..');
          _context5.next = 2;
          break;

        case 11:
          return _context5.abrupt('return', null);

        case 12:
        case 'end':
          return _context5.stop();
      }
    }
  }, null, this);
}